import tensorflow as tf


image_size = 28#图片大小
num_channels = 1#颜色通道
num_labels = 10#图片种类


conv1_size = 11#第一层卷积核大小
conv1_deep = 96#卷积核深度

conv2_size = 5
conv2_deep = 256

conv3_size = 3
conv3_deep = 384

conv4_size = 3
conv4_deep = 384

conv5_size = 3
conv5_deep = 256

fc1_size = 4096#第一层全连接层参数个数
fc2_size = 4096#第二层全连接层参数个数


def inference(input_tensor,train,regularizer):

    with tf.variable_scope('layer1-conv1'):#第一层卷积层

        weights = tf.get_variable('weights',[conv1_size,conv1_size,num_channels,conv1_deep],
                                  initializer=tf.truncated_normal_initializer(stddev=0.1))
        biases = tf.get_variable('biases',[conv1_deep],initializer=tf.constant_initializer(0.0))
        conv1 = tf.nn.conv2d(input_tensor,weights,[1,1,1,1],padding='SAME')
        relu1 = tf.nn.relu(tf.nn.bias_add(conv1,biases))

    with tf.variable_scope('layer2-pool1'):#第一层池化层

        pool1 = tf.nn.max_pool(relu1,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')

    with tf.variable_scope('layer3-conv2'):#第二层卷积层

        weights = tf.get_variable('weights', [conv2_size, conv2_size,conv1_deep, conv2_deep],
                                  initializer=tf.truncated_normal_initializer(stddev=0.1))
        biases = tf.get_variable('biases', [conv2_deep], initializer=tf.constant_initializer(0.0))
        conv2 = tf.nn.conv2d(pool1, weights, [1, 1, 1, 1], padding='SAME')
        relu2 = tf.nn.relu(tf.nn.bias_add(conv2, biases))

    with tf.variable_scope('layer4-pool2'):#第二层池化层

        pool2 = tf.nn.max_pool(relu2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

    with tf.variable_scope('layer5-conv3'):#第三层卷积层

        weights = tf.get_variable('weights', [conv3_size, conv3_size, conv2_deep, conv3_deep],
                                  initializer=tf.truncated_normal_initializer(stddev=0.1))
        biases = tf.get_variable('biases', [conv3_deep], initializer=tf.constant_initializer(0.0))
        conv3 = tf.nn.conv2d(pool2, weights, [1, 1, 1, 1], padding='SAME')
        relu3 = tf.nn.relu(tf.nn.bias_add(conv3, biases))

    with tf.variable_scope('layer6-pool3'):#第三层池化层

        pool3 = tf.nn.max_pool(relu3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

    with tf.variable_scope('layer7-conv4'):#第四层卷积层

        weights = tf.get_variable('weights', [conv4_size, conv4_size, conv3_deep, conv4_deep],
                                  initializer=tf.truncated_normal_initializer(stddev=0.1))
        biases = tf.get_variable('biases', [conv4_deep], initializer=tf.constant_initializer(0.0))
        conv4 = tf.nn.conv2d(pool3, weights, [1, 1, 1, 1], padding='SAME')
        relu4 = tf.nn.relu(tf.nn.bias_add(conv4, biases))

    with tf.variable_scope('layer8-pool4'):#第四层池化层

        pool4 = tf.nn.max_pool(relu4, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

    with tf.variable_scope('layer9-conv5'):#第五层卷积层

        weights = tf.get_variable('weights', [conv5_size, conv5_size, conv4_deep, conv5_deep],
                                  initializer=tf.truncated_normal_initializer(stddev=0.1))
        biases = tf.get_variable('biases', [conv5_deep], initializer=tf.constant_initializer(0.0))
        conv5 = tf.nn.conv2d(pool4, weights, [1, 1, 1, 1], padding='SAME')
        relu5 = tf.nn.relu(tf.nn.bias_add(conv5, biases))

    with tf.variable_scope('layer10-pool5'):#第五层池化层

        pool5 = tf.nn.max_pool(relu5, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

    pool_shape = pool5.get_shape().as_list()
    node = pool_shape[1] * pool_shape[2] * pool_shape[3]
    reshaped = tf.reshape(pool5,[pool_shape[0],node])

    with tf.variable_scope('layer11-fc1'):#第一层全连接层

        fc1_weights = tf.get_variable('weights',[node,fc1_size],
                                      initializer=tf.truncated_normal_initializer(stddev=0.1))

        if regularizer != None:

            tf.add_to_collection('loss',regularizer(fc1_weights))

        fc1_biases = tf.get_variable('biases',[fc1_size],initializer=tf.constant_initializer(0.1))
        fc1 = tf.nn.relu(tf.matmul(reshaped,fc1_weights) + fc1_biases)

        if train :

            fc1 = tf.nn.dropout(fc1,0.8)

    with tf.variable_scope('layer12-fc2'):#第二层全连接层

        fc2_weights = tf.get_variable('weights',[fc1_size,fc2_size],
                                      initializer=tf.truncated_normal_initializer(stddev=0.1))

        if regularizer != None:

            tf.add_to_collection('loss',regularizer(fc2_weights))

        fc2_biases = tf.get_variable('biases',[fc2_size],initializer=tf.constant_initializer(0.1))
        fc2 = tf.nn.relu(tf.matmul(fc1,fc2_weights) + fc2_biases)

        if train:

            fc2 = tf.nn.dropout(fc2,0.8)

    with tf.variable_scope('layer13-output'):#输出层

        fc3_weights = tf.get_variable('weights',[fc2_size,num_labels],
                                      initializer=tf.truncated_normal_initializer(stddev=0.1))

        if regularizer != None:

            tf.add_to_collection('loss',regularizer(fc3_weights))

        fc3_biases = tf.get_variable('biases',[num_labels],initializer=tf.constant_initializer(0.1))
        output = tf.matmul(fc2,fc3_weights) + fc3_biases

    #返回预测值
    return output





